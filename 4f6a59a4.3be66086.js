(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=r,O=p["".concat(a,".").concat(d)]||p[d]||u[d]||o;return n?i.a.createElement(O,c(c({ref:t},s),{},{components:n})):i.a.createElement(O,c({ref:t},s))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(2),i=n(6),o=(n(0),n(101)),a={id:"api",title:"API",sidebar_label:"API"},c={unversionedId:"development/api",id:"development/api",isDocsHomePage:!1,title:"API",description:"Description",source:"@site/docs\\development\\api.md",slug:"/development/api",permalink:"/docs/development/api",editUrl:"https://github.com/StrykerDG/StrykerDG.FarmForge/tree/master/StrykerDG.FarmForge.Documentation/docs/development/api.md",version:"current",sidebar_label:"API",sidebar:"someSidebar",previous:{title:"Client",permalink:"/docs/development/client"},next:{title:"External API",permalink:"/docs/development/ext_api"}},l=[{value:"Description",id:"description",children:[]},{value:"Dependencies",id:"dependencies",children:[]},{value:"Endpoints",id:"endpoints",children:[{value:"Auth",id:"auth",children:[]},{value:"Crops",id:"crops",children:[]},{value:"CropClassifications",id:"cropclassifications",children:[]},{value:"CropLogs",id:"croplogs",children:[]},{value:"CropTypes",id:"croptypes",children:[]},{value:"Devices",id:"devices",children:[]},{value:"Locations",id:"locations",children:[]},{value:"LogTypes",id:"logtypes",children:[]},{value:"Statuses",id:"statuses",children:[]}]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"The FarmForge API is written in C#, and uses .Net Core."),Object(o.b)("h2",{id:"dependencies"},"Dependencies"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.google.com"}),".Net Core")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.google.com"}),"Akka.Net")," for logic"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.google.com"}),"FluentMigrator")," for running migrations at startup"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.google.com"}),"Entity Framework")," for database connections"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.google.com"}),"NSwag")," for openAPI documentation")),Object(o.b)("h2",{id:"endpoints"},"Endpoints"),Object(o.b)("h3",{id:"auth"},"Auth"),Object(o.b)("h4",{id:"post-authlogin"},"POST /Auth/Login"),Object(o.b)("p",null,"Description: Used to receive a token",Object(o.b)("br",null),"\nBody:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'{\n    "Username": "string",\n    "Password": "string"\n}\n')),Object(o.b)("h4",{id:"get-authusers"},"GET /Auth/Users"),Object(o.b)("p",null,"Description: Used to get a list of users"),Object(o.b)("h4",{id:"post-authusers"},"POST /Auth/Users"),Object(o.b)("p",null,"Description: Used to create a user",Object(o.b)("br",null),"\nBody:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'{\n    "Username": "string",\n    "Password": "string"\n}\n')),Object(o.b)("h4",{id:"deleteauthusersuserid"},"DELETE/Auth/Users/{userId}"),Object(o.b)("p",null,"Description: Used to delete a user",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"userId (int) - the Id of the user you want to delete")),Object(o.b)("h3",{id:"crops"},"Crops"),Object(o.b)("h4",{id:"get-crops"},"GET /Crops"),Object(o.b)("p",null,"Description: Get a list of crops",Object(o.b)("br",null),"\nParameters"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"begin (string) - String that is parsed for a DateTime"),Object(o.b)("li",{parentName:"ul"},"end (string) - String that is parsed for a DateTime"),Object(o.b)("li",{parentName:"ul"},"includes (string) - Specifies which joins to include"),Object(o.b)("li",{parentName:"ul"},"status (string) - Specifies the status of crops you want"),Object(o.b)("li",{parentName:"ul"},"location (string) - Specifies the location of crops you want")),Object(o.b)("h3",{id:"cropclassifications"},"CropClassifications"),Object(o.b)("h4",{id:"get-cropclassifications"},"GET /CropClassifications"),Object(o.b)("p",null,"Description: Get a list of CropClassifications"),Object(o.b)("h3",{id:"croplogs"},"CropLogs"),Object(o.b)("h4",{id:"get-croplogs"},"GET /CropLogs"),Object(o.b)("p",null,"Description: Used to get a list logs",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"type (string) - specify the type of log you want")),Object(o.b)("h3",{id:"croptypes"},"CropTypes"),Object(o.b)("h4",{id:"get-croptypes"},"GET /CropTypes"),Object(o.b)("p",null,"Description: Used to get a list crop types"),Object(o.b)("h4",{id:"post-croptypes"},"POST /CropTypes"),Object(o.b)("p",null,"Description: Used to create a new type",Object(o.b)("br",null),"\nBody:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'{\n    "Name": "string",\n    "ClassificationId": "int"\n}\n')),Object(o.b)("h4",{id:"delete-croptypesid"},"DELETE /CropTypes/{id}"),Object(o.b)("p",null,"Description: Used to get a list logs",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"id (int) - specify the id of the crop type you want to delete")),Object(o.b)("h4",{id:"post-croptypescroptypeidvarietyvarietyname"},"POST /CropTypes/{cropTypeId}/Variety/{varietyName}"),Object(o.b)("p",null,"Description: Used to create a new variety for the specified crop type",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cropTypeId (int) - The id of the crop type you're adding a variety to"),Object(o.b)("li",{parentName:"ul"},"varietyName (string) - The name of the variety you want to add")),Object(o.b)("h4",{id:"delete-croptypescroptypeidvarietyvarietyid"},"DELETE /CropTypes/{cropTypeId}/Variety/{varietyId}"),Object(o.b)("p",null,"Description: Used to delete a variety from a crop",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"cropTypeId (int) - the id of the crop type you're removing the variety from"),Object(o.b)("li",{parentName:"ul"},"varietyId (int) - the id of the variety you want to remove")),Object(o.b)("h3",{id:"devices"},"Devices"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Coming soon!")),Object(o.b)("h3",{id:"locations"},"Locations"),Object(o.b)("h4",{id:"get-locations"},"GET /Locations"),Object(o.b)("p",null,"Description: Used to get a list of locations"),Object(o.b)("h4",{id:"post-locations"},"POST /Locations"),Object(o.b)("p",null,"Description: Used to create a new location",Object(o.b)("br",null),"\nBody: "),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'{\n    "Label": "string",\n    "ParentId: "int"\n}\n')),Object(o.b)("h4",{id:"patch-locations"},"PATCH /Locations"),Object(o.b)("p",null,"Description: Used to update a location",Object(o.b)("br",null),"\nBody: "),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'{\n    "Fields" : "string"\n    "Location": "Location"\n}\n')),Object(o.b)("h4",{id:"delete-locationslocationid"},"DELETE /Locations/{locationId}"),Object(o.b)("p",null,"Description: Used to delete the specified location",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"locationId (int) - the id of the location you wish to delete")),Object(o.b)("h3",{id:"logtypes"},"LogTypes"),Object(o.b)("h4",{id:"get-logtypesentitytype"},"GET /LogTypes/{entityType}"),Object(o.b)("p",null,"Description: Used to get the log types related to an entity",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"entityType (string) - the entity you want to get logs types for")),Object(o.b)("h3",{id:"statuses"},"Statuses"),Object(o.b)("h4",{id:"get-statusesentitytype"},"GET /Statuses/{entityType}"),Object(o.b)("p",null,"Description: Used to get the statuses related to an entity",Object(o.b)("br",null),"\nParameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"entityType (string) - the entity you want to get statuses for")))}b.isMDXComponent=!0}}]);