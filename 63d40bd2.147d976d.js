(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{101:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return b}));var n=r(0),o=r.n(n);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,b=d["".concat(a,".").concat(m)]||d[m]||p[m]||c;return r?o.a.createElement(b,i(i({ref:t},l),{},{components:r})):o.a.createElement(b,i({ref:t},l))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,a=new Array(c);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var l=2;l<c;l++)a[l]=r[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},73:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return u}));var n=r(2),o=r(6),c=(r(0),r(101)),a={id:"actors",title:"Actors",sidebar_label:"Actors"},i={unversionedId:"development/actors",id:"development/actors",isDocsHomePage:!1,title:"Actors",description:"Introduction",source:"@site/docs\\development\\actors.md",slug:"/development/actors",permalink:"/docs/development/actors",editUrl:"https://github.com/StrykerDG/StrykerDG.FarmForge/tree/master/StrykerDG.FarmForge.Documentation/docs/development/actors.md",version:"current",sidebar_label:"Actors",sidebar:"someSidebar",previous:{title:"Migrations",permalink:"/docs/development/migrations"},next:{title:"IoT Hub",permalink:"/docs/development/iot_hub"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Actor Structure",id:"actor-structure",children:[{value:"Constructor",id:"constructor",children:[]},{value:"Message Methods",id:"message-methods",children:[]},{value:"Helper Methods",id:"helper-methods",children:[]}]}],l={rightToc:s};function u(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"introduction"},"Introduction"),Object(c.b)("p",null,'The actor system is where all "business logic" resides for FarmForge. The reason\nfor this is to keep the logic in a central location that can be accessed from\nanywhere. '),Object(c.b)("p",null,"This makes it available not only to the local API, but also websocket requests\nfrom FarmForge IoT devices, as well as requests from the external API, should\nan individual decide that they want to connect their local installation to the\noutside world."),Object(c.b)("h2",{id:"actor-structure"},"Actor Structure"),Object(c.b)("p",null,"Each actor is setup following a similar pattern, and inherits from the FarmForge\nactor, which provides some common functionality."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"public class DemoActor : FarmForgeActor\n{\n    // Constructor\n    // Message Methods\n    // Helper Methods\n}\n")),Object(c.b)("h3",{id:"constructor"},"Constructor"),Object(c.b)("p",null,'The constructor takes in an IServiceScopeFactory and sets up all of the various\n"Receive" methods'),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"public DemoActor(IServiceScopeFactory factory) : base(factory)\n{\n    Receive<AskForDemo>(HandleAskForDemo);\n}\n")),Object(c.b)("h3",{id:"message-methods"},"Message Methods"),Object(c.b)("p",null,"The message methods are the methods called from Receive and contain the logic\nfor whatever action is being performed."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"private void HandleAskForDemo(AskForDemo message) \n{\n    Using<FarmForgeDataContext>((context) =>\n    {\n        var results = context.Demos\n            .ToList();\n\n        Sender.Tell(results);\n    });\n}\n")),Object(c.b)("h3",{id:"helper-methods"},"Helper Methods"),Object(c.b)("p",null,"Helper methods are functions that are either used in multiple message methods,\nor to move logic out of the message methods to keep the code more readable"))}u.isMDXComponent=!0}}]);